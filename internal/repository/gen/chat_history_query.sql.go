// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_history_query.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createChatHistory = `-- name: CreateChatHistory :exec
INSERT INTO chat_history (
    message_id, message_timestamp, sender_id, receiver_id, message, retry_count, status
) VALUES ( ?, ?, ?, ?, ?, ?, ?)
`

type CreateChatHistoryParams struct {
	MessageID        string         `json:"message_id"`
	MessageTimestamp time.Time      `json:"message_timestamp"`
	SenderID         string         `json:"sender_id"`
	ReceiverID       string         `json:"receiver_id"`
	Message          string         `json:"message"`
	RetryCount       sql.NullInt32  `json:"retry_count"`
	Status           sql.NullString `json:"status"`
}

func (q *Queries) CreateChatHistory(ctx context.Context, arg CreateChatHistoryParams) error {
	_, err := q.db.ExecContext(ctx, createChatHistory,
		arg.MessageID,
		arg.MessageTimestamp,
		arg.SenderID,
		arg.ReceiverID,
		arg.Message,
		arg.RetryCount,
		arg.Status,
	)
	return err
}

const getChatHistoryByMessageId = `-- name: GetChatHistoryByMessageId :one
SELECT
    id, message_id, message_timestamp, sender_id, receiver_id, message, retry_count, status, created_at, updated_at
FROM
    chat_history
WHERE
    message_id = ?
`

func (q *Queries) GetChatHistoryByMessageId(ctx context.Context, messageID string) (ChatHistory, error) {
	row := q.db.QueryRowContext(ctx, getChatHistoryByMessageId, messageID)
	var i ChatHistory
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.MessageTimestamp,
		&i.SenderID,
		&i.ReceiverID,
		&i.Message,
		&i.RetryCount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatHistoryByReceiverIdAndStatus = `-- name: GetChatHistoryByReceiverIdAndStatus :many
SELECT
    id, message_id, message_timestamp, sender_id, receiver_id, message, retry_count, status, created_at, updated_at
FROM
    chat_history
WHERE
    receiver_id = ? AND status = ?
ORDER BY
    message_timestamp ASC
`

type GetChatHistoryByReceiverIdAndStatusParams struct {
	ReceiverID string         `json:"receiver_id"`
	Status     sql.NullString `json:"status"`
}

func (q *Queries) GetChatHistoryByReceiverIdAndStatus(ctx context.Context, arg GetChatHistoryByReceiverIdAndStatusParams) ([]ChatHistory, error) {
	rows, err := q.db.QueryContext(ctx, getChatHistoryByReceiverIdAndStatus, arg.ReceiverID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatHistory
	for rows.Next() {
		var i ChatHistory
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.MessageTimestamp,
			&i.SenderID,
			&i.ReceiverID,
			&i.Message,
			&i.RetryCount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatHistoryStatusByMessageId = `-- name: UpdateChatHistoryStatusByMessageId :exec
UPDATE
    chat_history
SET
    message = ?, retry_count = ?, status = ?, updated_at = CURRENT_TIMESTAMP
WHERE
    message_id = ?
`

type UpdateChatHistoryStatusByMessageIdParams struct {
	Message    string         `json:"message"`
	RetryCount sql.NullInt32  `json:"retry_count"`
	Status     sql.NullString `json:"status"`
	MessageID  string         `json:"message_id"`
}

func (q *Queries) UpdateChatHistoryStatusByMessageId(ctx context.Context, arg UpdateChatHistoryStatusByMessageIdParams) error {
	_, err := q.db.ExecContext(ctx, updateChatHistoryStatusByMessageId,
		arg.Message,
		arg.RetryCount,
		arg.Status,
		arg.MessageID,
	)
	return err
}
