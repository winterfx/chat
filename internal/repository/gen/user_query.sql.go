// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_query.sql

package gen

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, email, name, auth_provider, password_hash)
VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	UserID       string `json:"user_id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.AuthProvider,
		arg.PasswordHash,
	)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, userID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, email, name, auth_provider, password_hash
FROM users
`

type GetAllUsersRow struct {
	UserID       string `json:"user_id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.AuthProvider,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, name, auth_provider, password_hash
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	UserID       string `json:"user_id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.AuthProvider,
		&i.PasswordHash,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, name, auth_provider, password_hash
FROM users
WHERE user_id = ?
`

type GetUserByIdRow struct {
	UserID       string `json:"user_id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) GetUserById(ctx context.Context, userID string) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.AuthProvider,
		&i.PasswordHash,
	)
	return i, err
}

const updateUserByEmail = `-- name: UpdateUserByEmail :exec
UPDATE users
SET
    name = ?,
    auth_provider = ?,
    password_hash=?,
    updated_at = CURRENT_TIMESTAMP
WHERE email = ?
`

type UpdateUserByEmailParams struct {
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

func (q *Queries) UpdateUserByEmail(ctx context.Context, arg UpdateUserByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByEmail,
		arg.Name,
		arg.AuthProvider,
		arg.PasswordHash,
		arg.Email,
	)
	return err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET
    name = ?,
    auth_provider = ?,
    password_hash = ?,
    email = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?
`

type UpdateUserByIdParams struct {
	Name         string `json:"name"`
	AuthProvider string `json:"auth_provider"`
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
	UserID       string `json:"user_id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Name,
		arg.AuthProvider,
		arg.PasswordHash,
		arg.Email,
		arg.UserID,
	)
	return err
}
